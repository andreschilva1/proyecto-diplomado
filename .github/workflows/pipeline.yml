name: CI/CD Laravel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, bcmath, pdo, pdo_pgsql, gd, zip, intl
          coverage: none
          tools: composer:v2

      - name: Cache Composer deps
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Install Composerdependencies
        run: composer install --no-interaction --no-progress --prefer-dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-app
          path: ./

  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-app
          path: ./

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, bcmath, pdo, pdo_pgsql, gd, zip, intl
          coverage: none

      - name: Install SQLite
        run: sudo apt-get install -y sqlite3

      - name: Create .env for SQLite
        run: |
          cat <<EOF > .env
          APP_NAME=Laravel
          APP_ENV=testing
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=true
          APP_URL=http://localhost

          DB_CONNECTION=sqlite
          DB_DATABASE=$(pwd)/database/database.sqlite
          EOF

      - name: Create SQLite database file
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Ensure Laravel cache directories exist
        run: |
          mkdir -p bootstrap/cache
          mkdir -p storage/framework/{cache,sessions,testing,views}
          mkdir -p storage/logs
        
      - name: Run Laravel migrations
        run: php artisan migrate:fresh

      - name: Seed / Apply raw schema
        run: sqlite3 database/database.sqlite < script_sqlite.sql.txt

      # - name: Run tests
      #   run: php artisan test

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-22.04
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/app-laravel:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/app-laravel:${{ github.sha }}


  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-22.04
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure target directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: mkdir -p ~/example-app && touch ~/example-app/docker-compose.yml

      - name: Copy docker-compose.prod.yml as docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "~/example-app/"
          overwrite: true

      - name: Rename docker-compose.prod.yml to docker-compose.yml on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: mv ~/example-app/docker-compose.prod.yml ~/example-app/docker-compose.yml

      - name: Create .env file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat <<EOF > ~/example-app/.env
            APP_NAME=Laravel
            APP_ENV=production
            APP_KEY=${{ secrets.APP_KEY }}
            APP_DEBUG=false
            APP_URL=http://${{ secrets.VPS_HOST }}

            LOG_CHANNEL=stack
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=debug

            DB_CONNECTION=${{ secrets.DB_CONNECTION }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            BROADCAST_DRIVER=log
            CACHE_DRIVER=file
            FILESYSTEM_DISK=local
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=database
            SESSION_LIFETIME=120
            EOF

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/example-app
            docker compose pull
            docker compose down
            docker compose up -d --remove-orphans